import axios from 'axios'
import FormData from 'form-data'

import formidable from "formidable";
import fs from "fs";
// import mime from 'mime-types'

export const config = {
  api: {
    bodyParser: false
  }
};

const shopify_admin_token = process.env.SHOPIFY_ADMIN_TOKEN_SANITY_UPLOAD
const your_shopify_admin_url = process.env.SHOPIFY_ADMIN_URL

const incomingForm = formidable({ multiples: true })

const isFile = (file) => !Array.isArray(file) && file.filepath !== undefined

export default async (req, res) => {

  let mimeType = ''
  let fileName = ''
  try {
    const fileContent = await(new Promise((resolve, reject) => {
      incomingForm.parse(req, (err, _fields, files) => {
        if (isFile(files.file)) {
          const fileContentBuffer = fs.readFileSync(files.file.filepath)
          // const fileContentReadable = fileContentBuffer.toString('utf8')
          const data = fs.readFileSync(files.file.filepath);
          fileName = files.file.originalFilename
          mimeType = files.file.mimetype
          resolve(data)
        }

        reject()
      })
    }))


    // Do whatever you'd like with the file, since it's already in text

    const stagedUploadsQuery = `mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {
      stagedUploadsCreate(input: $input) {
        stagedTargets {
          resourceUrl
          url
          parameters {
            name
            value
          }
        }
        userErrors {
          field
          message
        }
      }
    }`

    // Variables
    const stagedUploadsVariables = {
      input: {
        filename: fileName,
        httpMethod: "POST",
        mimeType: mimeType,
        resource: "FILE", // Important to set this as FILE and not IMAGE. Or else when you try and create the file via Shopify's api there will be an error.
      },
    }



    // Result
    const stagedUploadsQueryResult = await axios.post(
      `${your_shopify_admin_url}/graphql.json`,
      {
        query: stagedUploadsQuery,
        variables: stagedUploadsVariables,
      },
      {
        headers: {
          "X-Shopify-Access-Token": `${shopify_admin_token}`,
        },
      }
    ).catch(error => {
      console.log('hey axios upload', error)
    });



    // Save the target info.
    const target =
      stagedUploadsQueryResult.data.data.stagedUploadsCreate.stagedTargets[0];
    const params = target.parameters; // Parameters contain all the sensitive info we'll need to interact with the aws bucket.
    const url = target.url; // This is the url you'll use to post data to aws or google. It's a generic s3 url that when combined with the params sends your data to the right place.
    const resourceUrl = target.resourceUrl; // This is the specific url that will contain your image data after you've uploaded the file to the aws staged target.
    // console.log('url', url)
    const form = new FormData();
    

    // Add each of the params we received from Shopify to the form. this will ensure our ajax request has the proper permissions and s3 location data.
    params.forEach(({ name, value }) => {
      form.append(name, value);
    });


    // Add the file to the form.
    form.append("file", fileContent, fileName);
      // Headers
    const headers = {
      ...form.getHeaders(), // Pass the headers generated by FormData library. It'll contain content-type: multipart/form-data. It's necessary to specify this when posting to aws.
    };
    if (url.includes("amazon")) {
      // Need to include the content length for Amazon uploads. If uploading to googleapis then the content-length header will break it.
      headers["Content-Length"] = 8000 + 5000; // AWS requires content length to be included in the headers. This may not be automatically passed so you'll need to specify. And ... add 5000 to ensure the upload works. Or else there will be an error saying the data isn't formatted properly.
    }

    // Post the file data to shopify's aws s3 bucket. After posting, we'll be able to use the resource url to create the file in Shopify.
    try {
      const postedData = await axios.post(url, form, {
        headers
      });
      console.log('posted data?', postedData)
    } catch (err) {
      console.log('err???', err)
      return res.status(400).send({ message: err })
    }

    console.log('this far??')


    /*------------------------
    Create the file.
    Now that the file is prepared and accessible on the staged target, use the resource url from aws to create the file.
    ------------------------*/
    // Query
    const createFileQuery = `mutation fileCreate($files: [FileCreateInput!]!) {
      fileCreate(files: $files) {
        files {
          alt
          fileStatus,
          ... on GenericFile {
            id
          }
          ... on MediaImage {
            id
          }
          ... on Video {
            id
          }
        }
        userErrors {
          field
          message
        }
      }
    }`;

    // Variables
    const createFileVariables = {
      files: {
        alt: "alt-tag",
        contentType: "FILE",
        originalSource: resourceUrl, // Pass the resource url we generated above as the original source. Shopify will do the work of parsing that url and adding it to files.
      },
    };

    // Finally post the file to shopify. It should appear in Settings > Files.
    const createFileQueryResult = await axios.post(
      `${your_shopify_admin_url}/graphql.json`,
      {
        query: createFileQuery,
        variables: createFileVariables,
      },
      {
        headers: {
          "X-Shopify-Access-Token": `${shopify_admin_token}`,
        },
      }
    )

    console.log(createFileQueryResult.data.data.fileCreate)


    /*------------------------
    Get the file.
    Now that the file is prepared and accessible on the staged target, use the resource url from aws to create the file.
    ------------------------*/
    // Query
    const getFileQuery = `query ($id: ID!) {
        node(id: $id) {
          ... on MediaImage {
            image {
              id
              url
              altText
              height
              width
            }
          }
          ... on GenericFile {
            id
            url
          }
        }
      }`;

    // Variables
    const findFileValue = {
      id: createFileQueryResult.data.data.fileCreate.files[0].id
    };


    console.log(new Date())
    function wait() {
      return new Promise(resolve => setTimeout(() => resolve("result"),5000));
    }



    async function waitBoi() {
      var res = await wait()
      // console.log('iside the wait',new Date())

      const getThatFile = await axios.post(
        `${your_shopify_admin_url}/graphql.json`,
        {
          query: getFileQuery,
          variables: findFileValue,
        },
        {
          headers: {
            "X-Shopify-Access-Token": `${shopify_admin_token}`,
          },
        }
      );

      return getThatFile
    }
    const fileData = await waitBoi()

    console.log('fileData', fileData?.data?.errors)
  
    return res.status(200).send({ message: 'Success', 
      data: fileData.data.data.node,
      fileGid: createFileQueryResult.data.data.fileCreate.files[0].id 
    })

  } catch (err) {
    return res.status(400).send({ message: 'Bad Request'})
  }
};
